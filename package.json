{
  "name": "musicxml-mma",
  "version": "1.8.3",
  "description": "MusicXML to Musical MIDI Accompaniment (MMA) converter",
  "main": "server.js",
  "type": "module",
  "directories": {
    "test": "test"
  },
  "bin": {
    "musicxml-mma": "src/js/server.js",
    "ireal-midi": "src/js/ireal-midi.js",
    "midi-timemap": "src/js/midi-timemap.js"
  },
  "scripts": {
    "build:mmarc": "cp mmarc.example mmarc",
    "build:grooves": "${MMA_HOME:-mma}/mma.py -G && npm run --silent print:grooves > build/grooves.txt",
    "build:sef": "xsls=('musicxml-unroll' 'musicxml-mma-unrolled' 'musicxml-mma' 'musicxml-timemap'); for xsl in ${xsls[@]}; do xslt3 -relocate:on -xsl:src/xsl/$xsl.xsl -export:./build/$xsl.sef.json -nogo:1 -t -ns:##html5; done && rm -f cache/*.mid",
    "build": "[ ! -f mmarc ] && npm run build:mmarc; npm run build:grooves; npm run build:sef",
    "convert:unroll": "run() { xslt3 -xsl:src/xsl/musicxml-unroll.xsl -s:\"$1\" ${@:2}; }; run",
    "convert:timemap": "run() { xslt3 -xsl:src/xsl/musicxml-timemap.xsl -s:\"$1\" ${@:2}; }; run",
    "convert:mma": "run() { xslt3 -xsl:src/xsl/musicxml-mma.xsl -s:\"$1\" ${@:2}; }; run",
    "convert:midi": "run() { ${MMA_HOME:-mma}/mma.py -II \"$1\" -f \"${1/.mma/.mid}\"; }; run",
    "convert": "run() { npm run convert:mma \"$1\" ${@:2} && npm run convert:midi \"${1/.musicxml/.mma}\"; }; run",
    "print:chord": "run() { echo \"PrintChord $1\" | ${MMA_HOME:-mma}/mma.py -n -; }; run",
    "print:grooves": "find ${MMA_HOME:-mma}/lib grooves -name '*.mma' | while read f; do MMA_ENCODING=utf-8 ${MMA_HOME:-mma}/mma.py -Dbo \"$f\" | tail -n +2; done",
    "print:preview": "run() { ${MMA_HOME:-mma}/mma.py -V \"$@\"; }; run",
    "validate:musicxml": "run() { xmllint --noout --schema src/xsd/musicxml.xsd \"$1\"; }; run",
    "validate:mma": "run() { ${MMA_HOME:-mma}/mma.py -II -n \"$1\"; }; run",
    "develop": "nodemon -e js,json src/js/server.js",
    "start": "node src/js/server.js",
    "test:xsl": "test/libs/bats/bin/bats test/*.bats",
    "test:server": "cross-env PORT=1331 NODE_OPTIONS=--experimental-vm-modules NODE_ENV=test jest",
    "test": "npm run test:xsl && npm run test:server",
    "server": "PORT=8085 npm run start",
    "postinstall": "./postinstall.sh"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/infojunkie/musicxml-mma.git"
  },
  "author": "Karim Ratib <karim.ratib@gmail.com> (https://github.com/infojunkie)",
  "license": "GPL-3.0-only",
  "bugs": {
    "url": "https://github.com/infojunkie/musicxml-mma/issues"
  },
  "homepage": "https://github.com/infojunkie/musicxml-mma#readme",
  "dependencies": {
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "express": "^4.17.3",
    "express-fileupload": "^1.3.1",
    "morgan": "^1.10.0",
    "saxon-js": "^2.3.0",
    "unzipit": "^1.4.0",
    "validate-with-xmllint": "^1.2.0",
    "xslt3": "^2.3.0"
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "glob": "^8.0.3",
    "ireal-musicxml": "^1.7.3",
    "jest": "^27.5.1",
    "midi-file": "^1.2.2",
    "nodemon": "^2.0.15",
    "sanitize-filename": "^1.6.3",
    "sinon": "^13.0.1",
    "supertest": "^6.2.2"
  },
  "jest": {
    "testEnvironment": "jest-environment-node",
    "transform": {},
    "coveragePathIgnorePatterns": [
      "/node_modules/"
    ]
  }
}
